{"version":3,"sources":["Components/Title.js","Firebase/config.js","hooks/useStorage.js","Components/ProgressBar.js","Components/UploadForm.js","hooks/useFirestore.js","Components/ImageGrid.js","Components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Title","props","className","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFireStore","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","motion","div","initial","width","animate","UploadForm","types","type","onChange","event","selectedFile","target","files","includes","useFirestore","docs","setDocs","loading","setLoading","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","layout","whileHover","opacity","onClick","img","src","alt","Modal","selectedImg","classList","contains","y","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAYeA,EAVD,SAAAC,GACV,OACI,sBAAKC,UAAU,QAAf,UACI,8CACA,8CACA,gE,6CCOZC,IAASC,cATY,CACjBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKX,IAAMC,EAAiBR,IAASS,UAC1BC,EAAmBV,IAASW,YAC5BC,EAAYZ,IAASW,UAAUE,WAAWC,gBCoBjCC,EAnCI,SAACC,GAEhB,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsBJ,mBAAS,MAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KA4BA,OA1BAC,qBAAU,WAEN,IAAMC,EAAajB,EAAekB,IAAIV,EAAKW,MAGrCC,EAAgBlB,EAAiBmB,WAAW,UAKlDJ,EAAWK,IAAId,GAAMe,GAAG,iBAAiB,SAACC,GACtC,IAAIC,EAAcD,EAAKE,iBAAmBF,EAAKG,WAAc,IAC7DhB,EAAYc,MACb,SAACG,GACAf,EAASe,KAJb,sBAKG,8BAAAC,EAAA,sEACmBZ,EAAWa,iBAD9B,cACOhB,EADP,OAEOiB,EAAY3B,IAFnB,SAGOgB,EAAcY,IAAI,CACpBlB,MACAiB,cALL,OAOChB,EAAOD,GAPR,8CASJ,CAACN,IAEG,CAAEE,WAAUI,MAAKF,U,QCbbqB,EAlBK,SAAC,GAAuB,IAArBzB,EAAoB,EAApBA,KAAM0B,EAAc,EAAdA,QAEzB,EAA0B3B,EAAWC,GAA7BM,EAAR,EAAQA,IAAKJ,EAAb,EAAaA,SAQb,OANAM,qBAAU,WACFF,GACAoB,EAAQ,QAEb,CAACpB,EAAKoB,IAGL,cAACC,EAAA,EAAOC,IAAR,CACI7C,UAAU,eACV8C,QAAS,CAAEC,MAAO,GAClBC,QAAS,CAAED,MAAO5B,EAAW,QCqB1B8B,EApCI,SAAAlD,GAEf,MAAwBmB,mBAAS,MAAjC,mBAAOD,EAAP,KAAa0B,EAAb,KACA,EAA0BzB,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEM4B,EAAQ,CAAC,YAAa,cAgB5B,OACI,iCACI,kCACI,uBAAOC,KAAK,OAAOC,SAjBT,SAACC,GACnB,IAAIC,EAAeD,EAAME,OAAOC,MAAM,GAGlCF,GAAgBJ,EAAMO,SAASH,EAAaH,OAC5CR,EAAQW,GACRhC,EAAS,MAGTqB,EAAQ,MACRrB,EAAS,iDAQL,wCAEJ,sBAAKtB,UAAU,SAAf,UACKqB,GAAS,qBAAKrB,UAAU,QAAf,SAAwBqB,IACjCJ,GAAQ,8BAAMA,EAAKW,OACnBX,GAAQ,cAAC,EAAD,CAAaA,KAAMA,EAAM0B,QAASA,W,QCA5Ce,EA9BM,SAAC5B,GAElB,MAAwBZ,mBAAS,IAAjC,mBAAOyC,EAAP,KAAaC,EAAb,KACA,EAA8B1C,oBAAS,GAAvC,mBAAO2C,EAAP,KAAgBC,EAAhB,KAwBA,OAtBArC,qBAAU,WACNqC,GAAW,GACX,IAAMC,EAAQpD,EAAiBmB,WAAWA,GACrCkC,QAAQ,YAAa,QACrBC,YAAW,SAAChC,GACT,IAAIiC,EAAY,GAEhBjC,EAAK0B,KAAKQ,SAAQ,SAAAC,GACdF,EAAUG,KAAV,2BACOD,EAAIE,QADX,IAEIC,GAAIH,EAAIG,SAIhBX,EAAQM,GACRJ,GAAW,MAGnB,OAAO,kBAAMC,OAEd,CAACjC,IAEG,CAAE6B,OAAME,YCHJW,EAvBG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAEhB,EAA0Bf,EAAa,UAA/BC,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAEd,OACI,sBAAK7D,UAAU,WAAf,UACK6D,GAAW,qBAAK7D,UAAU,YAC1B2D,IAASE,GAAWF,EAAKe,KAAI,SAAAN,GAAG,OAC7B,cAACxB,EAAA,EAAOC,IAAR,CACI7C,UAAU,WACV2E,QAAM,EACNC,WAAY,CAACC,QAAS,GAEtBC,QAAS,kBAAML,EAAeL,EAAI7C,MALtC,SAMQ,cAACqB,EAAA,EAAOmC,IAAR,CACIC,IAAKZ,EAAI7C,IACT0D,IAAI,kBAJPb,EAAIG,WCQdW,EArBD,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaV,EAAoB,EAApBA,eAQzB,OACI,cAAC7B,EAAA,EAAOC,IAAR,CAAY7C,UAAU,WAClB8E,QARkB,SAACzB,GACpBA,EAAME,OAAO6B,UAAUC,SAAS,aAC/BZ,EAAe,OAOf3B,QAAS,CAAE+B,QAAS,GACpB7B,QAAS,CAAE6B,QAAS,GAHxB,SAII,cAACjC,EAAA,EAAOmC,IAAR,CAAYC,IAAKG,EACbrC,QAAS,CAAEwC,EAAG,UACdtC,QAAS,CAAEsC,EAAG,GACdL,IAAI,oBCCLM,MAdf,WAEE,MAAsCrE,mBAAS,MAA/C,mBAAOiE,EAAP,KAAoBV,EAApB,KAEA,OACE,sBAAKzE,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAWyE,eAAgBA,IAC1BU,GAAe,cAAC,EAAD,CAAOA,YAAaA,EAAaV,eAAgBA,QCHxDe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d229413.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = props => {\r\n    return (\r\n        <div className=\"title\">\r\n            <h1>Photo Arcade</h1>\r\n            <h2>All Pictures</h2>\r\n            <p>Collection of curated pics.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Title;","import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAzi3J5CLqwwKMfhZRGU1avich90khR5lU\",\r\n    authDomain: \"photo-arcade.firebaseapp.com\",\r\n    projectId: \"photo-arcade\",\r\n    storageBucket: \"photo-arcade.appspot.com\",\r\n    messagingSenderId: \"544561417840\",\r\n    appId: \"1:544561417840:web:aa95ce6bbd6b467a152eb5\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFireStore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFireStore, timestamp };","import { useEffect, useState } from 'react';\r\nimport { projectStorage, projectFireStore, timestamp } from '../Firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // name reference of to be uploaded file\r\n        const storageRef = projectStorage.ref(file.name);\r\n\r\n        // collection reference of firebase \r\n        const collectionRef = projectFireStore.collection('images');\r\n\r\n        // upload file to firebase storage\r\n        // listening on state_changed event during file upload and trigerring a function with the\r\n        // snapshot of file in time during upload\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            await collectionRef.add({\r\n                url,\r\n                createdAt\r\n            });\r\n            setUrl(url);\r\n        });\r\n    }, [file]);\r\n\r\n    return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n\r\n    const { url, progress } = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile]);\r\n\r\n    return (\r\n        <motion.div\r\n            className=\"progress-bar\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + '%' }}></motion.div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = props => {\r\n\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n    const changeHandler = (event) => {\r\n        let selectedFile = event.target.files[0];\r\n        //console.log(selectedFile);\r\n\r\n        if (selectedFile && types.includes(selectedFile.type)) {\r\n            setFile(selectedFile);\r\n            setError(\"\");\r\n        }\r\n        else {\r\n            setFile(null);\r\n            setError(\"Please select an image file (png or jpeg)\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type=\"file\" onChange={changeHandler} />\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\">{error}</div>}\r\n                {file && <div>{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default UploadForm;","import { useEffect, useState } from \"react\";\r\nimport { projectFireStore } from \"../Firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n\r\n    const [docs, setDocs] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const unsub = projectFireStore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                \r\n                snap.docs.forEach(doc => {\r\n                    documents.push({\r\n                        ...doc.data(),\r\n                        id: doc.id\r\n                    });\r\n                });\r\n\r\n                setDocs(documents);\r\n                setLoading(false);\r\n            });\r\n\r\n        return () => unsub();\r\n\r\n    }, [collection]);\r\n\r\n    return { docs, loading };\r\n};\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({setSelectedImg}) => {\r\n\r\n    const { docs, loading } = useFirestore('images');\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {loading && <div className=\"spinner\"></div>}\r\n            {docs && !loading && docs.map(doc => (\r\n                <motion.div \r\n                    className=\"img-wrap\"\r\n                    layout\r\n                    whileHover={{opacity: 1}}\r\n                    key={doc.id} \r\n                    onClick={() => setSelectedImg(doc.url)}>\r\n                        <motion.img \r\n                            src={doc.url}\r\n                            alt=\"uploaded pic\" />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({selectedImg, setSelectedImg}) => {\r\n\r\n    const modalCloseHandler = (event) => {\r\n        if(event.target.classList.contains('backdrop')) {\r\n            setSelectedImg(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div className=\"backdrop\" \r\n            onClick={modalCloseHandler}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}>\r\n            <motion.img src={selectedImg} \r\n                initial={{ y: '-100vh' }}\r\n                animate={{ y: 0 }}\r\n                alt='enlarged pic' />\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React, { useState } from 'react';\nimport Title from './Components/Title';\nimport UploadForm from './Components/UploadForm';\nimport ImageGrid from './Components/ImageGrid';\nimport Modal from './Components/Modal';\n\nfunction App() {\n\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}